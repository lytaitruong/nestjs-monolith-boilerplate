name: Build to ECR

on:
  push:
    branches:
      - development
      - uat
      - production

env:
  ECR_REPOSITORY: nestjs-monolith-boilerplate
  ECR_ENVIRONMENT: ${{ github.head_ref || github.ref_name }}
  ECS_CONTAINER: nestjs-monolith
  ECS_CLUSTER: nestjs-monolith-cluster
  ECS_SERVICE: nestjs-monolith-service
  ECS_TASK_DEFINITION: ./.aws/task-definition

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  defined-metadata:
    name: Metadata
    runs-on: self-hosted
    outputs:
      repository-name: ${{ steps.defined-env.outputs.repository-name }}
      ecs-task-definition: ${{ steps.defined-env.outputs.task-definition }}
      ecs-container: ${{ steps.defined-env.outputs.container }}
      ecs-service: ${{ steps.defined-env.outputs.ecs-service }}
      ecs-cluster: ${{ steps.defined-env.outputs.ecs-cluster }}
    steps:
      - name: Set Environment
        id: defined-env
        run: |
          echo "repository-name=${{ env.ECR_REPOSITORY }}-${{ env.ECR_ENVIRONMENT }}" >> "$GITHUB_OUTPUT"
          echo "task-definition=${{ env.ECS_TASK_DEFINITION }}-${{ env.ECR_ENVIRONMENT }}" >> "$GITHUB_OUTPUT"
          echo "container=${{ env.ECS_CONTAINER }}-${{ env.ECR_ENVIRONMENT }}" >> "$GITHUB_OUTPUT"
          echo "ecs-service=${{ env.ECS_SERVICE }}-${{ env.ECR_ENVIRONMENT }}" >> "$GITHUB_OUTPUT"
          echo "ecs-cluster=${{ env.ECS_CLUSTER }}-${{ env.ECR_ENVIRONMENT }}" >> "$GITHUB_OUTPUT"

  sonarqube-scanner:
    if: ${{ github.head_ref || github.ref_name }} == 'uat'
    needs: [defined-metadata]
    name: Sonarqube scanner
    uses: ./.github/workflows/call-sonarqube.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-image:
    needs: [defined-metadata]
    name: Build & Push Image to ECR
    uses: ./.github/workflows/call-build.yml
    with:
      repository-name: ${{ needs.defined-metadata.outputs.repository-name }}
    secrets:
      AWS_IAM_ROLE_ASSUME: ${{ secrets.AWS_IAM_ROLE_ASSUME }}

  deployment:
    needs: [defined-metadata, build-image]
    if: always() && (needs.defined-metadata.result == 'success' && needs.build-image.result == 'success' && !contains(needs.*.result, 'cancelled'))
    name: Deployment to ECS
    uses: ./.github/workflows/call-deploy.yml
    with:
      ecs-task-definition: ${{ needs.defined-metadata.outputs.ecs-task-definition }}
      ecs-container: ${{ needs.defined-metadata.outputs.ecs-container }}
      ecs-service: ${{ needs.defined-metadata.outputs.ecs-service }}
      ecs-cluster: ${{ needs.defined-metadata.outputs.ecs-cluster }}
      ecr-image: ${{ needs.build-image.outputs.ecr-image }}
    secrets:
      AWS_IAM_ROLE_ASSUME: ${{ secrets.AWS_IAM_ROLE_ASSUME }}
